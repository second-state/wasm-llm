# This file is autogenerated by maturin v1.3.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    paths-ignore:
      - "**/*.md"
    branches:
      "**"
    tags:
      - 'chat/**'
  pull_request:
  workflow_dispatch:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: wasm_chat
  PYTHON_VERSION: "3.10"
  MATURIN_VERSION: "1.4.0"

jobs:
  linux-wheels:
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux2014_x86_64
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu] # aarch64-unknown-linux-gnu
        rust: [1.73]
        python_version: ["3.10"]
    steps:
      - name: Checkout wasm-llm
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup environment
        run: |
          bash deploy.sh
          echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH
          echo $HOME
          ls -al $HOME

      - name: Check WasmEdge Version
        env:
          LD_LIBRARY_PATH: /github/home/.wasmedge/lib
        run: |
          wasmedge --version
          which wasmedge

      - name: Install Rust toolchain
        run: |
          # curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain ${{ matrix.rust }}
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain ${{ matrix.rust }}
          source $HOME/.cargo/env
          rustup target add ${{ matrix.target }}
          rustc --version

      - name: Setup Conda dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          # Specify python version your environment will have. Remember to quote this, or
          # YAML will think you want python 3.1 not 3.10
          python-version: ${{ matrix.python_version }} # "3.10"
          # This uses *miniforge*, rather than *minicond*. The primary difference is that
          # the defaults channel is not enabled at all
          miniforge-version: latest
          # These properties enable the use of mamba, which is much faster and far less error
          # prone than conda while being completely compatible with the conda CLI
          use-mamba: true
          mamba-version: "*"

      - name: Pip install maturin and maturin[patchelf]
        # The `-l` is needed so conda environment activation works correctly
        shell: bash -l {0}
        run: |
          which python
          python --version
          pip --version
          pip install maturin==${{ env.MATURIN_VERSION }}
          pip install maturin[patchelf]
          pip list installed


      # - name: Install Rust-stable
      #   uses: dtolnay/rust-toolchain@stable
      #   with:
      #     toolchain: ${{ matrix.rust }}
      #     targets: ${{ matrix.target}}



  # linux:
  #   runs-on: ubuntu-22.04
  #   container:
  #     image: wasmedge/wasmedge:ubuntu-build-clang
  #   strategy:
  #     matrix:
  #       target: [x86_64-unknown-linux-gnu] # aarch64-unknown-linux-gnu
  #       rust: [1.73]
  #       python_version: [3.11, "3.10", 3.9, 3.8]
  #   steps:
  #     - name: Checkout wasm-llm
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up build environment
  #       run: |
  #         apt-get update
  #         apt-get install -y software-properties-common libboost-all-dev ninja-build
  #         apt-get install -y llvm-15-dev liblld-15-dev
  #         apt-get install -y tree libopenblas-dev gcc-multilib

  #     - name: Install Rust-stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         targets: ${{ matrix.target}}

  #     - name: Setup environment
  #       run: |
  #         bash deploy.sh
  #         echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

  #     - name: Check WasmEdge Version
  #       run: |
  #         wasmedge --version
  #         which wasmedge

  #     - name: Setup Conda dependencies
  #       uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         # Specify python version your environment will have. Remember to quote this, or
  #         # YAML will think you want python 3.1 not 3.10
  #         python-version: ${{ matrix.python_version }} # "3.10"
  #         # This uses *miniforge*, rather than *minicond*. The primary difference is that
  #         # the defaults channel is not enabled at all
  #         miniforge-version: latest
  #         # These properties enable the use of mamba, which is much faster and far less error
  #         # prone than conda while being completely compatible with the conda CLI
  #         use-mamba: true
  #         mamba-version: "*"

  #     - name: Pip install maturin and maturin[patchelf]
  #       # The `-l` is needed so conda environment activation works correctly
  #       shell: bash -l {0}
  #       run: |
  #         which python
  #         pip install maturin==${{ env.MATURIN_VERSION }}
  #         pip install maturin[patchelf]
  #         pip list installed

  #     - name: Build wheels
  #       working-directory: wasm-chat
  #       shell: bash -l {0}
  #       run: |
  #         maturin build --compatibility linux -f -r -o dist --target ${{ matrix.target }}

  #     - name: check artifacts
  #       working-directory: 'wasm-chat'
  #       shell: bash -l {0}
  #       run: |
  #         ls -al dist

  #     - name: Test wheel-310
  #       if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.10') }}
  #       working-directory: 'wasm-chat'
  #       env:
  #         LD_LIBRARY_PATH: /github/home/.wasmedge/lib
  #       shell: bash -l {0}
  #       run: |
  #         pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp310-cp310-*_x86_64.whl --force-reinstall
  #         pip install pytest
  #         pytest -v

  #     - name: Test wheel-311
  #       if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.11') }}
  #       working-directory: 'wasm-chat'
  #       env:
  #         LD_LIBRARY_PATH: /github/home/.wasmedge/lib
  #       shell: bash -l {0}
  #       run: |
  #         pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp311-cp311-*_x86_64.whl --force-reinstall
  #         pip install pytest
  #         pytest -v

  #     - name: Test wheel-39
  #       if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.9') }}
  #       working-directory: 'wasm-chat'
  #       env:
  #         LD_LIBRARY_PATH: /github/home/.wasmedge/lib
  #       shell: bash -l {0}
  #       run: |
  #         pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp39-cp39-*_x86_64.whl --force-reinstall
  #         pip install pytest
  #         pytest -v

  #     - name: Test wheel-38
  #       if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.8') }}
  #       working-directory: 'wasm-chat'
  #       env:
  #         LD_LIBRARY_PATH: /github/home/.wasmedge/lib
  #       shell: bash -l {0}
  #       run: |
  #         ls -l dist
  #         pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp38-cp38-*_x86_64.whl --force-reinstall
  #         pip install pytest
  #         pytest -v

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: ${{ github.workspace }}/wasm-chat/dist

  # macos:
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       target: [x86_64-apple-darwin, aarch64-apple-darwin]
  #       rust: [1.73]
  #       python_version: [3.11, "3.10", 3.9, 3.8]
  #   steps:
  #     - name: Checkout wasm-llm
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Install build tools
  #       run: brew install llvm ninja boost cmake

  #     - name: Install Rust-stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         targets: ${{ matrix.target}}

  #     - name: Setup environment
  #       run: |
  #         bash deploy.sh
  #         echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

  #     - name: Check WasmEdge Version
  #       run: |
  #         wasmedge --version
  #         which wasmedge

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: 'true'
  #         working-directory: wasm-chat

  #     - name: check artifacts
  #       working-directory: 'wasm-chat'
  #       shell: bash -l {0}
  #       run: |
  #         ls -al dist

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: ${{ github.workspace }}/wasm-chat/dist

  # sdist:
  #   runs-on: ubuntu-22.04
  #   container:
  #     image: wasmedge/wasmedge:ubuntu-build-clang
  #   strategy:
  #     matrix:
  #       rust: [1.73]
  #       python_version: [3.11, "3.10", 3.9, 3.8]
  #   steps:
  #     - name: Checkout wasm-llm
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up build environment
  #       run: |
  #         apt-get update
  #         apt-get install -y software-properties-common libboost-all-dev ninja-build
  #         apt-get install -y llvm-15-dev liblld-15-dev
  #         apt-get install -y tree libopenblas-dev gcc-multilib

  #     - name: Install Rust-stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         toolchain: ${{ matrix.rust }}

  #     - name: Setup environment
  #       run: |
  #         bash deploy.sh
  #         echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

  #     - name: Check WasmEdge Version
  #       run: |
  #         wasmedge --version
  #         which wasmedge

  #     - name: Setup Conda dependencies
  #       uses: conda-incubator/setup-miniconda@v2
  #       with:
  #         # Specify python version your environment will have. Remember to quote this, or
  #         # YAML will think you want python 3.1 not 3.10
  #         python-version: ${{ matrix.python_version }} # "3.10"
  #         # This uses *miniforge*, rather than *minicond*. The primary difference is that
  #         # the defaults channel is not enabled at all
  #         miniforge-version: latest
  #         # These properties enable the use of mamba, which is much faster and far less error
  #         # prone than conda while being completely compatible with the conda CLI
  #         use-mamba: true
  #         mamba-version: "*"

  #     - name: Pip install maturin and maturin[patchelf]
  #       # The `-l` is needed so conda environment activation works correctly
  #       shell: bash -l {0}
  #       run: |
  #         which python
  #         pip install maturin==${{ env.MATURIN_VERSION }}
  #         pip install maturin[patchelf]
  #         pip list installed

  #     - name: Build wheels
  #       working-directory: wasm-chat
  #       shell: bash -l {0}
  #       run: |
  #         maturin sdist -o dist

  #     - name: check artifacts
  #       working-directory: 'wasm-chat'
  #       shell: bash -l {0}
  #       run: |
  #         ls -al dist

  #     - name: Upload sdist
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: ${{ github.workspace }}/wasm-chat/dist

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [linux, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels

  #     - name: Publish to PyPI
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing *
