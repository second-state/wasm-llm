name: Build and Release

on:
  push:
    paths-ignore:
      - "**/*.md"
      - "*.md"
    branches:
      - "**"
  pull_request:
    branches:
      - main
  workflow_dispatch: # manual trigger release
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean
      release_version:
        description: "Version (e.g. 1.0.0)"
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PACKAGE_NAME: wasm_chat
  MATURIN_VERSION: "1.4.0"

jobs:
  build-chat-linux:
    runs-on: ubuntu-22.04
    container:
      image: wasmedge/wasmedge:ubuntu-build-clang
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu] # aarch64-unknown-linux-gnu
        rust: [1.73]
        python_version: [3.12, 3.11, "3.10", 3.9]
    steps:
      - name: Checkout wasm-llm
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up build environment
        run: |
          apt-get update
          apt-get install -y software-properties-common libboost-all-dev ninja-build
          apt-get install -y llvm-15-dev liblld-15-dev
          apt-get install -y tree libopenblas-dev gcc-multilib

      - name: Install Rust-stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target}}

      - name: Setup environment
        run: |
          bash deploy.sh
          echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

      - name: Check WasmEdge Version
        run: |
          wasmedge --version
          which wasmedge

      - name: Setup Conda dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          # Specify python version your environment will have. Remember to quote this, or
          # YAML will think you want python 3.1 not 3.10
          python-version: ${{ matrix.python_version }} # "3.10"
          # This uses *miniforge*, rather than *minicond*. The primary difference is that
          # the defaults channel is not enabled at all
          miniforge-version: latest
          # These properties enable the use of mamba, which is much faster and far less error
          # prone than conda while being completely compatible with the conda CLI
          use-mamba: true
          mamba-version: "*"

      - name: Pip install maturin and maturin[patchelf]
        # The `-l` is needed so conda environment activation works correctly
        shell: bash -l {0}
        run: |
          which python
          pip install maturin==${{ env.MATURIN_VERSION }}
          pip install maturin[patchelf]
          pip list installed

      - name: Build wheels
        working-directory: wasm-chat
        shell: bash -l {0}
        run: |
          maturin build --compatibility linux -f -r -o dist --target ${{ matrix.target }}

      - name: check artifacts
        working-directory: "wasm-chat"
        shell: bash -l {0}
        run: |
          ls -al dist

      - name: Test wheel-310
        if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.10') }}
        working-directory: "wasm-chat"
        env:
          LD_LIBRARY_PATH: /github/home/.wasmedge/lib
        shell: bash -l {0}
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp310-cp310-linux_x86_64.whl --force-reinstall
          pip install pytest
          pytest -v

      - name: Test wheel-311
        if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.11') }}
        working-directory: "wasm-chat"
        env:
          LD_LIBRARY_PATH: /github/home/.wasmedge/lib
        shell: bash -l {0}
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp311-cp311-linux_x86_64.whl --force-reinstall
          pip install pytest
          pytest -v

      - name: Test wheel-312
        if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.12') }}
        working-directory: "wasm-chat"
        env:
          LD_LIBRARY_PATH: /github/home/.wasmedge/lib
        shell: bash -l {0}
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp312-cp312-linux_x86_64.whl --force-reinstall
          pip install pytest
          pytest -v

      - name: Test wheel-39
        if: ${{ (matrix.target == 'x86_64-unknown-linux-gnu') && (matrix.python_version == '3.9') }}
        working-directory: "wasm-chat"
        env:
          LD_LIBRARY_PATH: /github/home/.wasmedge/lib
        shell: bash -l {0}
        run: |
          pip install dist/${{ env.PACKAGE_NAME }}-0.1.0-cp39-cp39-linux_x86_64.whl --force-reinstall
          pip install pytest
          pytest -v

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-wasm-chat-${{ matrix.target }}-${{ matrix.python_version }}
          path: ${{ github.workspace }}/wasm-chat/dist/*.whl

  build-chat-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin]
        rust: [1.73]
        python_version: [3.12, 3.11, "3.10", 3.9]
    steps:
      - name: Checkout wasm-llm
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build tools
        run: brew install llvm ninja boost cmake

      - name: Install Rust-stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target}}

      - name: Setup environment
        run: |
          bash deploy.sh
          # echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          sccache: "true"
          working-directory: wasm-chat

      - name: check artifacts
        working-directory: "wasm-chat"
        shell: bash -l {0}
        run: |
          ls -al dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-wasm-chat-${{ matrix.target }}-${{ matrix.python_version }}
          path: ${{ github.workspace }}/wasm-chat/dist/*.whl

  build-chat-sdist:
    runs-on: ubuntu-22.04
    container:
      image: wasmedge/wasmedge:ubuntu-build-clang
    strategy:
      matrix:
        rust: [1.73]
        python_version: [3.11]
    steps:
      - name: Checkout wasm-llm
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up build environment
        run: |
          apt-get update
          apt-get install -y software-properties-common libboost-all-dev ninja-build
          apt-get install -y llvm-15-dev liblld-15-dev
          apt-get install -y tree libopenblas-dev gcc-multilib

      - name: Install Rust-stable
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup environment
        run: |
          bash deploy.sh
          echo "$HOME/.wasmedge/bin" >> $GITHUB_PATH

      - name: Check WasmEdge Version
        run: |
          wasmedge --version
          which wasmedge

      - name: Setup Conda dependencies
        uses: conda-incubator/setup-miniconda@v2
        with:
          # Specify python version your environment will have. Remember to quote this, or
          # YAML will think you want python 3.1 not 3.10
          python-version: ${{ matrix.python_version }} # "3.10"
          # This uses *miniforge*, rather than *minicond*. The primary difference is that
          # the defaults channel is not enabled at all
          miniforge-version: latest
          # These properties enable the use of mamba, which is much faster and far less error
          # prone than conda while being completely compatible with the conda CLI
          use-mamba: true
          mamba-version: "*"

      - name: Pip install maturin and maturin[patchelf]
        # The `-l` is needed so conda environment activation works correctly
        shell: bash -l {0}
        run: |
          which python
          pip install maturin==${{ env.MATURIN_VERSION }}
          pip install maturin[patchelf]
          pip list installed

      - name: Build wheels
        working-directory: wasm-chat
        shell: bash -l {0}
        run: |
          maturin sdist -o dist

      - name: check artifacts
        working-directory: "wasm-chat"
        shell: bash -l {0}
        run: |
          ls -al dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-wasm-chat-sdist
          path: ${{ github.workspace }}/wasm-chat/dist/*.tar.gz

  build-infer:
    runs-on: ubuntu-latest
    steps:
      - name: Clone project
        id: checkout
        uses: actions/checkout@v3

      - name: Setup rustup
        id: rustup
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: wasm32-wasi

      - name: Build wasm-infer
        id: build_wasm_infer
        run: |
          cd wasm-infer
          cargo build --target wasm32-wasi --release
          cp ./target/wasm32-wasi/release/wasm_infer.wasm ../wasm_infer.wasm

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: my-artifact-wasm-infer
          path: |
            wasm_infer.wasm
            deploy.sh

  release:
    if: ${{ github.ref == 'refs/heads/main' && github.event.inputs.create_release == 'true' }}
    runs-on: ubuntu-latest
    needs: [build-chat-linux, build-chat-macos, build-chat-sdist, build-infer]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: my-artifact
          pattern: my-artifact-wasm-*
          merge-multiple: true

      - run: ls -R my-artifact

      - name: Calculate checksum
        id: checksum
        run: |
          cd my-artifact
          for file in *; do
            sha256sum "$file" >> SHA256SUM
          done

          echo "Debug info(SHA256SUM):"
          cat SHA256SUM

      - name: Tag and release names
        id: tag_and_release_names
        run: |
          echo "tag_name=release/${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT

      - name: Create Release and Upload Release Asset
        if: ${{ github.event.inputs.create_release == 'true' && github.ref == 'refs/heads/main'}}
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.tag_and_release_names.outputs.release_name }}
          tag_name: ${{ steps.tag_and_release_names.outputs.tag_name }}
          body: TODO New Release.
          draft: false
          prerelease: false
          files: |
            my-artifact/wasm_chat-*.whl
            my-artifact/wasm_chat-*.tar.gz
            my-artifact/wasm_infer.wasm
            my-artifact/deploy.sh
            my-artifact/SHA256SUM

  # publish-pypi:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: "startsWith(github.ref, 'refs/tags/')"
  #   needs: [linux, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: wheels

  #     - name: Publish to PyPI
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing *
